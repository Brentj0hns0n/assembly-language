###############################################################################
# Title: Assign02P3                   Author: Brent Johnson
# Class: CS 2318-002, Fall 2014       Submitted: 10-27-14
###############################################################################
# Program: MIPS tranlation of a given C++ program
###############################################################################
# Pseudocode description: supplied a2p2_SampSoln.cpp
###############################################################################

##include <iostream>
#using namespace std;
			.data
#int  a1[12],
#    a2[12],
#     a3[12];

a1:			.space 48
a2:			.space 48
a3:			.space 48
#char reply;
reply:			.space 1
#int  used1,
#     used2,
#     used3,
#     remCount,
#     anchor;
used1:			.space 4
used2:			.space 4
used3:			.space 4
remCount:		.space 4
anchor:			.space 4

#int* hopPtr1;
#int* hopPtr11;
#int* hopPtr2;
#int* hopPtr22;
#int* hopPtr222;
#int* hopPtr3;
#int* endPtr1;
#int* endPtr2;
#int* endPtr3;

#char begA1Str[] = "beginning a1: ";
begA1Str:		.asciiz "\n beginning a1: "			
#char proA1Str[] = "processed a1: ";
proA1Str:		.asciiz "\n processed a1: "
#char comA2Str[] = "\n          a2: ";
comA2Str:		.asciiz "          a2: "
#char comA3Str[] = "\n         a3: ";
comA3Str:		.asciiz "          a3: "
#char einStr[]   = "\n Enter integer #";
einStr:			.asciiz "Enter integer #"
#char moStr[]    = "\n Max of ";
moStr:			.asciiz "Max of "
#char ieStr[]    = "\n ints entered...";
ieStr:			.asciiz " ints entered..."
#char emiStr[]   = "\n Enter more ints? (n or N = no, others = yes) ";
emiStr:			.asciiz "Enter more ints? (n or N = no, others = yes) "
#char dacStr[]   = "\n Do another case? (n or N = no, others = yes) ";
dacStr:			.asciiz "Do another case? (n or N = no, others = yes) "
#char dlStr[]    = "\n ================================";
d1Str:			.asciiz "\n ================================"
#char byeStr[]   = "bye...";
byeStr:			.asciiz "\n bye..."
			.align 1


#int main()
#{
			.text
			.globl main
main:
						
#             //do
begDW1: #    {
        #        used1 = 0;
			li $t1, 0
        #        hopPtr1 = a1;
        		la $t4, a1
        #        //do
begDW2:#//       {
       #            cout << einStr;
       			li $v0, 4
			la $a0, einStr
			syscall
			
     #            cout << (used1 + 1);
     #             cout << ':' << ' ';
     			li $v0, 1
     			li $t0, 1
     			add $a0, $t1, $t0      # add 1 to used
    			syscall
    			
			li $a0, ':'
     			li $v0, 11
     			syscall
    			
			li $a0, ' '
     			li $v0, 11
     			syscall
     			
    # 		cin >> *hopPtr1;
    			li $v0, 5
    			syscall
    			move $t4, $v0
    			
  #                 ++used1;
  			addi $t1, $t1, 1
   #                ++hopPtr1;
   			addi $t4, $t4, 1
    #               //if (used1 == 12)
   #               if (used1 != 12) goto else1;
   			li $t0, 12
   			bne $t1, $t0, else1
 
                  
begI1:#//           {
       #               cout << moStr;
       			li $v0, 4
       			la $a0, moStr
       			syscall
                     # cout << 12;
                     	li $a0, 12
                     	li $v0, 1
                     	syscall
                    #  cout << ieStr;
                    	li $v0, 4
                    	la $a0, ieStr
                    	syscall
                    #  cout << endl;
                    	li $a0, '\n'
                    	li $v0, 11
                    	syscall
                    #  reply = 'n';
                    	li $t8, 'n'
                 #  goto endI1;
                 	j endI1
#//                 }
else1:#//           else
#//                 {
  #                    cout << emiStr;
     			li $v0, 4
                      	la $a0, emiStr
                      	syscall
 #                     cin >> reply;
 			li $v0, 12
 			syscall
 			move $t8, $v0
endI1:#//           }
#//              }
#                //while (reply != 'n' && reply != 'N');
DWTest2:
#                ///if (reply != 'n' && reply != 'N') goto begDW2;
#                if (reply == 'n') goto xitDW2;
			li $t0, 'N'
			beq $t0, $t8, xitDW2
              #  if (reply != 'N') goto begDW2;
              		li $t0, 'N'
              		bne $t0, $t8, begDW2
xitDW2:

       #         cout << begA1Str;
       			la $a0, begA1Str
       			li $v0, 4
       			syscall

#                endPtr1 = a1 + used1;
			la $t0, a1 
			sll $v1,$t1, 2
			add $a1, $t0, $v1
#                //for (hopPtr1 = a1; hopPtr1 < endPtr1; ++hopPtr1)
#                hopPtr1 = a1;
                	la $t4, a1
#                goto FTest1;
			j FTest1
begF1:#//        {
#                   //if (hopPtr1 == endPtr1 - 1)
#                   if (hopPtr1 != endPtr1 - 1) goto else2;
			addi $t9, $a1, -4
			bge $t4, $t9, else2
begI2:#//           {
#                      cout << *hopPtr1 << endl;
                      	li $v0, 1
			lw $a0, 0($t4)
			syscall
			li $v0, 11
			li $a0, '\n'
			syscall
			syscall
#                   goto endI2;
			j endI2
#//                 }
else2:#//           else
#//                 {
#                      cout << *hopPtr1 << ' ';
                      	li $v0, 1
			lw $a0, 0($t4)
			syscall
			li $v0, 11
			li $a0, ' '
			syscall
endI2:#//           }
#                ++hopPtr1;
			addi, $t4, $t4, 4
endF1:#//        }
FTest1:
#                if (hopPtr1 < endPtr1) goto begF1;
			blt $t4, $a1, begF1
#                //for (hopPtr1 = a1, hopPtr2 = a2, used2 = 0; hopPtr1 < endPtr1; ++hopPtr1, ++hopPtr2, ++used2)
#                hopPtr1 = a1;
			la $t4, a1			
#                 hopPtr2 = a2;
                	la $t5, a2
#                used2 = 0;
			li $t2, 0
#                goto FTest2;
			j FTest2
begF2:#//        {
 #                  *hopPtr2 = *hopPtr1;
			sw $t4, 0($t5)
                   	
#                ++hopPtr1;
                	addi $t4, $t4, 4
#                ++hopPtr2;
			addi $t5, $t5, 4
#                ++used2;
			addi $t2, $t2, 1
endF2:#//         }
FTest2:
#                if (hopPtr1 < endPtr1) goto begF2;
			blt $t4, $a3, begF2
#                endPtr2 = a2 + used2;
                	la $t9, a2
			sll $a2, $t2, 2
			add $a2, $a2, $t9	

#                //for (hopPtr2 = a2; hopPtr2 < endPtr2; ++hopPtr2)
#                hopPtr2 = a2;
                        la $t5, a2
#                goto FTest3;
			j FTest3
begF3:#//        {
#                   anchor = *hopPtr2;
			move $t8, $t5

#                   //for (hopPtr22 = hopPtr2 + 1; hopPtr22 < endPtr2; ++hopPtr22)
#                   hopPtr22 = hopPtr2 + 1;
                   	addi $t6, $t5, 4
#                   goto FTest4;
			j FTest4
                   
begF4:#//           {
#                      //if (*hopPtr22 == anchor)
#                      if (*hopPtr22 != anchor) goto endI3;
			lw $t9, 0($t6)
			bne $t9, $t8, endI3
begI3:#//              {
#                         //for (hopPtr222 = hopPtr22 + 1; hopPtr222 < endPtr2; ++hopPtr222)
#                         hopPtr222 = hopPtr22 + 1;
			li $t0, 4
			add $t7, $t6, $t0
			
#                         goto FTest5;
			j FTest5
begF5:#//                 {
#                            *(hopPtr222 - 1) = *hopPtr222;
               		sw $t7, -4($t7)
#                        ++hopPtr222;
			li $v1, 4
			add $t7, $t7, $v1
endF5:#//                 }
FTest5:
#                         if (hopPtr222 < endPtr2) goto begF5;
			blt $t7, $a2, begF5 
#                         --used2;
			li $v1, -1
 			add $t2, $t2, $v1                         
#                         --endPtr2;
			li $v1, -4
 			add $a2, $a2, $v1                         
			
#                         --hopPtr22;
               		add $t6, $t6, $v1
endI3:#//              }
 #                  ++hopPtr22;
 			li $v1, 4
 			add $t6, $t6, $v1
endF4:#//           }
FTest4:#:
#                   if (hopPtr22 < endPtr2) goto begF4;
			blt $t6, $a2, begF4
#               ++hopPtr2;
 			li $v1, 4
 			add $t5, $t5, $v1
endF3:#//       }
FTest3:
#                if (hopPtr2 < endPtr2) goto begF3;
			blt $t5, $a2, begF3

#                used3 = 0;
		li $t3, 0
#                hopPtr3 = a3;
		la $t7, a3
#                hopPtr1 = a1;
		la $t4, a1

#                //while (hopPtr1 < endPtr1)
#                goto WTest1;	
		j WTest1
begW1:#//        {
#                   *hopPtr3 = *hopPtr1;
     		sw $t7, 0($t4)
#                   ++used3;
            	li $v0, 1
            	add $t3, $t3, $v0
#                   ++hopPtr3;
            	li $v0, 4
            	add $t7, $t7, $v0
#                   anchor = *hopPtr1;
		lw $t8, 0($t4)
#                   remCount = 0;
		li $t5, 0

#                   //for (hopPtr11 = hopPtr1 + 1; hopPtr11 < endPtr1; ++hopPtr11)
#                   hopPtr11 = hopPtr1 + 1;
		lw $t6, 4($t4)
#                   goto FTest6;
		j FTest6
begF6:#//           {
#                      //if (*hopPtr11 == anchor)
#                      if (*hopPtr11 != anchor) goto else4;
		lw $v0, 0($t6)
		bne $t8, $v0, else4
		
begI4:#//              {
#                         ++remCount;
		li $t9, 1
		add $t5, $t5, $t9 
#                      goto endI4;
		j endI4
#//                    }
else4:#//              else
#//                    {
#                         *(hopPtr11 - remCount) = *hopPtr11;
         		lw $v1, 0($t6)
         		lw $t0, 0($t5)
         		sub $t0, $t6, $t0
         		sw $v1, 0($t0) 
endI4:#//              }
#                   ++hopPtr11;
                   	li $v1, 4
                   	add $t6, $v1, $t6
endF6:#//           }
FTest6:
#                   if (hopPtr11 < endPtr1) goto begF6;
			blt $t6, $a1, begF6

#                   used1 -= remCount;
               	        lw $v1, 0($t5)
			sub $t1, $t1, $v1
#                   endPtr1 -= remCount;
			lw $v1, 0($t5)
			sub $a1, $a1, $v1
#                   ++hopPtr1;
			li $v1, 4
			add $t4, $v1, $t4
endW1:#//        }
WTest1:
#                if (hopPtr1 < endPtr1) goto begW1;
			blt $t4, $a1, begW1

#                cout << proA1Str;
			li $v0, 4
			la $a0, proA1Str
			syscall

#                //for (hopPtr1 = a1; hopPtr1 < endPtr1; ++hopPtr1)
#                hopPtr1 = a1;
                	la $t4, a1
#                goto FTest7;
			j FTest7
begF7:#//        {
#                   //if (hopPtr1 == endPtr1 - 1)
#                   if (hopPtr1 != endPtr1 - 1) goto else5;
			li $t0, -4
			add $v1, $t0, $a1
			bne $t4, $v1, else5
begI5:#//           {
#                      cout << *hopPtr1 << endl;
			li $v0, 1
			lw $a0, 0($t4)
			syscall
			li $v0, 12
			li $a0, '\n'
			syscall
#                   goto endI5;
			j endI5
#//                 }
else5:#//           else
#//                 {
#                      cout << *hopPtr1 << ' ';
                	li $v0, 1
			lw $a0, 0($t4)
			syscall
			li $v0, 12
			li $a0, ' '
			syscall
endI5:#//           }
#                ++hopPtr1;
                	li $v1, 4
                	add $t4, $v1, $t4
endF7:#//        }
FTest7:
#                if (hopPtr1 < endPtr1) goto begF7;
			bne $t4, $a1, begF7

#                cout << comA2Str;
                	li $v0, 4
			la $a0, comA2Str
			syscall
		
#                //for (hopPtr2 = a2; hopPtr2 < endPtr2; ++hopPtr2)
#                hopPtr2 = a2; 
                	la $t5, a2                
#                goto FTest8;
			j FTest8
begF8:#//        {
#                   //if (hopPtr2 == endPtr2 - 1)
#                   if (hopPtr2 != endPtr2 - 1) goto else6;
			li $v1, -4
			add $t0, $v1, $a2
			bne $t0, $a2, else6
begI6:#//           {
#                      cout << *hopPtr2 << endl;
                      	li $v0, 1
			lw $a0, 0($t5)
			syscall
			li $v0, 12
			li $a0, '\n'
			syscall
#                   goto endI6;
			j endI6
#//                 }
else6:#//           else
#//                 {
#                      cout << *hopPtr2 << ' ';
                      	li $v0, 1
			lw $a0, 0($t5)
			syscall
			li $v0, 12
			li $a0, ' '
			syscall
endI6:#//           }
#                ++hopPtr2;
			li $v1, 4
			add $t5, $t5, $v1
endF8:#//        }
FTest8:
#               if (hopPtr2 < endPtr2) goto begF8;
			blt $t4, $a2, begF8

#                cout << comA3Str;
                	li $v0, 4
			la $a0, comA3Str
			syscall
#                endPtr3 = a3 + used3;
			la $t9, a3
			sll $a3, $t3, 2
			add $a3, $a3, $t9
		          

  #              //for (hopPtr3 = a3; hopPtr3 < endPtr3; ++hopPtr3)
   #             hopPtr3 = a3; 
                	la $t7, a3
     #           goto FTest9;
     			j FTest9
begF9:#//        {
      #             //if (hopPtr3 == endPtr3 - 1)
      #             if (hopPtr3 != endPtr3 - 1) goto else7;
			addi $t9, $a3, -4
			bge $t7, $t9, else7
begI7:#//           {
#                      cout << *hopPtr3 << endl;
                      	li $v0, 1
			lw $a0, 0($t7)
			syscall
			li $v0, 11
			li $a0, '\n'
			syscall
#                   goto endI7;
                   	j endI7
#//                 }
else7:#//           else
#//                 {
#                     cout << *hopPtr3 << ' ';
			li $v0, 1
			lw $a0, 0($t7)
			syscall
			li $v0, 11
			li $a0, ' '
			syscall
			syscall
endI7:#//           }
#                ++hopPtr3;
                	addi $t7, $t7, 4      #increment hopPtr3 by one int
endF9:#//        }
FTest9:
         #       if (hopPtr3 < endPtr3) goto begF9;
                	blt $t7, $a3, begF9

      #          cout << endl;
                	li $v0, 11
			li $a0, '\n'
			syscall
        #        cout << dacStr;
                	li $v0, 4
			la $a0, dacStr
			syscall
#                cin >> reply;
			li $v0, 12
			syscall
			move $t8, $v0
#                cout << endl;
                	li $v0, 11
			li $a0, '\n'
			syscall
#//           }
#             //while (reply != 'n' && reply != 'N');
 
DWTest1:
#             ///if (reply != 'n' && reply != 'N') goto begDW1;
#             if (reply == 'n') goto xitDW1;
             		li $v1, 'n'
             		beq $v1, $t8, xitDW1
             		
#             if (reply != 'N') goto begDW1;
			li $v1, 'N'
			bne $v1, $t8, begDW1
xitDW1:

#             cout << dlStr;
			li $v0, 4
			la $a0, d1Str
			syscall
#             cout << '\n';
			li $v0, 11
			li $a0, '\n'
			syscall
         #    cout << byeStr;
          	   	li $v0, 4
			la $a0, byeStr
			syscall
#             cout << '\n';
			li $v0, 11
			li $a0, '\n'
			syscall
#             cout << dlStr;
			li $v0, 4
			la $a0, d1Str
			syscall
#             cout << '\n';
			li $v0, 11
			li $a0, '\n'
			syscall			
#             return 0;
#}
			li $v0, 10
			syscall

     			
     			

     			 
                  
